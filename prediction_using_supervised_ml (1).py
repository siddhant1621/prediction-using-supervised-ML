# -*- coding: utf-8 -*-
"""prediction using supervised ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iwWKMG81IsMPkTZQ6LDpaxlYv48r8n1Z
"""

# Commented out IPython magic to ensure Python compatibility.
#@title

# imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
# load data
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
data.head()

data.shape

# plotting data on scatterplot
plt.scatter(x=data['Hours'], y=data['Scores'])
plt.title('Hours vs Scores')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.show()

"""
preprocessing"""

X = data[['Hours']].values
y = data[['Scores']].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                    test_size=0.2, random_state=42)

"""modeling"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

model.intercept_, model.coef_

# defining regression line
line = model.coef_*X+model.intercept_

# plotting for the test data
plt.scatter(X_train, y_train, label='train data')
plt.scatter(X_test, y_test, label='test data')
plt.plot(X, line)
plt.title('Hours vs Scores')
plt.xlabel('Hours')
plt.ylabel('Scores')
plt.legend()
plt.show()

"""making prediction"""

y_pred = model.predict(X_test)
# comparing actual vs predicted
pd.DataFrame({'Actual': y_test.ravel(), 'Predicted': y_pred.ravel()})

"""
Evaluate the model"""

from sklearn.metrics import mean_squared_error, mean_absolute_error
mean_squared_error(y_true=y_test, y_pred=y_pred)

mean_absolute_error(y_true=y_test, y_pred=y_pred)

"""predict with own data"""

import ipywidgets as widgets

def displayData(hours):
    #hours = text.value
    print('No. of Hours: %.1f'%(hours))
    pred = model.predict([[hours]])
    print('Predicted Score: %.4f'%(pred))

text = widgets.FloatText(description='Enter Hours')
button = widgets.Button(description='Submit')

display(text)
display(button)

tempFunc = lambda t: displayData(text.value)
button.on_click(tempFunc)